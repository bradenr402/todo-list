/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>l});var o=n(354),r=n.n(o),i=n(314),a=n.n(i)()(r());a.push([t.id,"html {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --primary-blue: #5ac8fa;\n  --primary-red: #f56565;\n  --primary-green: #40c0a0;\n  --light-gray: #e5e7eb;\n  --medium-gray: #c7c9cd;\n  --light-blue: #c9edfd;\n}\n\nbody {\n  font-family: sans-serif;\n}\n\n.hidden {\n  display: none;\n}\n\n.block {\n  display: block;\n}\n\n.past-due {\n  color: var(--primary-red);\n}\n\n.future-due {\n  color: var(--primary-green);\n}\n\n.due-today {\n  color: var(--primary-blue);\n}\n\nmain {\n  display: grid;\n  grid-template-columns: max(25%, 250px) 1fr;\n}\n\n.title {\n  font-family: serif;\n  font-size: 2.5rem;\n  letter-spacing: 0.1rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.new-todo-btn-container {\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  padding-top: 1rem;\n  display: flex;\n  justify-content: center;\n}\n\n.tutorial-btn-container {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-top: auto;\n  gap: 0.5rem;\n}\n\n.title > .sub-title {\n  color: var(--primary-blue);\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.new-todo-btn,\n.replay-tutorial-btn,\n.end-tutorial-btn {\n  cursor: pointer;\n  border-radius: 1rem;\n  padding: 0.75rem;\n  width: 100%;\n  font-size: 1.125rem;\n}\n\n.new-todo-btn {\n  border: none;\n  background-color: var(--primary-blue);\n  color: white;\n  transition: box-shadow 200ms ease-in-out;\n}\n\n.new-todo-btn:hover {\n  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.replay-tutorial-btn,\n.end-tutorial-btn {\n  border: 1px solid var(--primary-red);\n  background-color: white;\n  color: var(--primary-red);\n  transition: color 200ms ease-in-out, background-color 200ms ease-in-out;\n}\n\n.replay-tutorial-btn:hover,\n.end-tutorial-btn:hover {\n  color: white;\n  background-color: var(--primary-red);\n}\n\n.title,\n.side-links,\n.new-todo-btn-container,\n.tutorial-btn-container {\n  padding: 1rem;\n}\n\n.sidebar {\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  height: 100vh;\n  position: sticky;\n  top: 0;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.side-links {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.tab {\n  cursor: pointer;\n  border-radius: 1rem;\n  border: none;\n  background-color: transparent;\n  font-weight: 500;\n  text-align: left;\n  padding: 0.75rem;\n  width: 100%;\n  font-size: 1.1rem;\n  transition: background-color 200ms ease-in-out;\n}\n\n.side-links:not(:has(.dragging)) .tab-container:not(.dragging):hover .tab {\n  background-color: var(--light-gray);\n}\n\n.edit-todo-btn,\ninput[type='submit'] {\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.5rem 1rem;\n\n  background-color: var(--light-gray);\n}\n\ninput[type='submit'] {\n  background-color: var(--primary-blue);\n  color: white;\n  width: 100%;\n  transition: box-shadow 200ms ease-in-out;\n}\n\ninput[type='submit']:hover {\n  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.1);\n}\n\ndialog {\n  position: absolute;\n  transform: translate(-50%, -50%);\n  inset: 50%;\n  padding: 1rem;\n  width: 80%;\n  max-width: 450px;\n  min-width: 300px;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 50px 10px rgba(0, 0, 0, 0.1);\n}\n\ndialog::backdrop {\n  backdrop-filter: blur(5px);\n  background-color: rgba(0, 0, 0, 0.3);\n}\n\ntextarea {\n  resize: none;\n}\n\n.input-group {\n  display: flex;\n  flex-direction: column;\n  margin: 1rem 0;\n}\n\n.close-modal-btn {\n  height: 2rem;\n  width: 2rem;\n  font-size: 1.25rem;\n  font-weight: 600;\n  border: none;\n  border-radius: 0.25em;\n  background-color: var(--primary-red);\n  color: white;\n}\n\n.selected {\n  background-color: var(--light-gray);\n}\n\n.checkbox {\n  margin-right: 0.5rem;\n}\n\n.list-title {\n  margin: 0 0.5rem 0.5rem;\n  color: var(--primary-blue);\n}\n\n.todo {\n  list-style: none;\n  padding: 0.5rem;\n  border-radius: 1rem;\n  transition: background-color 200ms ease-in-out;\n  min-height: 65px;\n  position: relative;\n}\n\n.todo:not(:last-child)::after {\n  content: '';\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.todo-description {\n  height: 1em;\n  margin-left: 1.25rem;\n  font-size: 0.9rem;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.todo-btn-container {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: end;\n  margin-top: 0.5rem;\n\n  position: absolute;\n  bottom: 0.5rem;\n  right: 0.5rem;\n}\n\n.todo-main {\n  margin-bottom: 0.5rem;\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.todo-title {\n  font-size: 1.125rem;\n}\n\n.todo-date {\n  margin-left: auto;\n  font-size: 0.9rem;\n}\n\n.content {\n  padding: 2rem;\n}\n\n.tab-container {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n\n  position: relative;\n}\n\n.edit-list-btn,\n.delete-list-btn {\n  cursor: default;\n  background-color: transparent;\n  border-radius: 0.5rem;\n  border: none;\n  padding: 0.25rem;\n\n  display: grid;\n  place-items: center;\n\n  position: absolute;\n}\n\n.delete-list-btn {\n  right: 0.5rem;\n}\n\n.edit-list-btn {\n  right: 2.75rem;\n}\n\n.delete-list-btn:focus,\n.delete-list-btn:hover,\n.delete-todo-btn:focus,\n.delete-todo-btn:hover {\n  color: var(--primary-red);\n}\n\n.delete-list-btn:hover,\n.edit-list-btn:hover {\n  background-color: var(--medium-gray);\n}\n\n.edit-list-btn,\n.delete-list-btn,\n.todo .edit-todo-btn,\n.todo .delete-todo-btn {\n  visibility: hidden;\n}\n\n.tab-container:has(.selected):focus-within .edit-list-btn,\n.tab-container:has(.selected):hover .edit-list-btn,\n.tab-container:has(.selected):focus-within .delete-list-btn,\n.tab-container:has(.selected):hover .delete-list-btn {\n  visibility: visible;\n}\n\n.todo:focus-within .edit-todo-btn,\n.todo:hover .edit-todo-btn,\n.todo:focus-within .delete-todo-btn,\n.todo:hover .delete-todo-btn {\n  visibility: visible;\n}\n\nul:not(:has(.dragging)) .todo:hover {\n  background-color: var(--light-gray);\n}\n\n.todo .edit-todo-btn:hover,\n.todo .delete-todo-btn:hover {\n  background-color: var(--medium-gray);\n}\n\n.edit-todo-btn,\n.delete-todo-btn {\n  background-color: transparent;\n  border-radius: 0.5rem;\n  border: none;\n  padding: 0.25rem;\n\n  display: grid;\n  place-items: center;\n}\n\n.edit-todo-btn:hover,\n.delete-todo-btn:hover {\n  background-color: var(--light-gray);\n}\n\n.tab-container .edit-icon,\n.tab-container .trash-icon {\n  font-size: 24px;\n}\n\n.todo .edit-icon,\n.todo .trash-icon {\n  font-size: 18px;\n}\n\n.dragging {\n  background-color: var(--light-blue);\n  border-radius: 1rem;\n}\n\n.tab-container.dragging .tab.selected {\n  background-color: var(--light-blue);\n}\n\ninput {\n  padding: 0.5rem 1rem;\n}\n\ntextarea {\n  padding: 1rem;\n}\n\nselect {\n  padding: 0.25rem 0.5rem;\n}\n\ninput,\ntextarea,\nselect {\n  font-size: 1rem;\n}\n\n.modal-header p {\n  font-size: 1.4rem;\n}\n\nlabel:not(> .todo-title) {\n  font-size: 1.1rem;\n  margin-bottom: 0.25rem;\n}\n\n.line-through {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.checkbox + label:hover {\n  color: rgba(0, 0, 0, 0.8);\n}\n\n@keyframes strike {\n  0% {\n    width: 0;\n  }\n  100% {\n    width: 100%;\n  }\n}\n\n.line-through {\n  position: relative;\n}\n\n.line-through::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background: black;\n  animation-name: strike;\n  animation-duration: 200ms;\n  animation-timing-function: ease-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n\n.todo-description-container {\n  margin-right: 4rem;\n}\n\n.todo-main:has(.line-through) ~ .todo-btn-container .edit-todo-btn {\n  display: none;\n}\n\ndialog {\n  display: block;\n  transition: opacity 200ms ease-in-out;\n}\n\ndialog:not([open]) {\n  pointer-events: none;\n  opacity: 0;\n}\n\ndialog[open] {\n  opacity: 1;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;;;EAGE,mBAAmB;EACnB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,uBAAuB;EACvB,sBAAsB;EACtB,wBAAwB;EACxB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,sBAAsB;EACtB,2CAA2C;AAC7C;;AAEA;EACE,wCAAwC;EACxC,iBAAiB;EACjB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,WAAW;AACb;;AAEA;;;EAGE,eAAe;EACf,mBAAmB;EACnB,gBAAgB;EAChB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,qCAAqC;EACrC,YAAY;EACZ,wCAAwC;AAC1C;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;;EAEE,oCAAoC;EACpC,uBAAuB;EACvB,yBAAyB;EACzB,uEAAuE;AACzE;;AAEA;;EAEE,YAAY;EACZ,oCAAoC;AACtC;;AAEA;;;;EAIE,aAAa;AACf;;AAEA;EACE,0CAA0C;EAC1C,aAAa;EACb,gBAAgB;EAChB,MAAM;;EAEN,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,YAAY;EACZ,6BAA6B;EAC7B,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,8CAA8C;AAChD;;AAEA;EACE,mCAAmC;AACrC;;AAEA;;EAEE,YAAY;EACZ,qBAAqB;EACrB,oBAAoB;;EAEpB,mCAAmC;AACrC;;AAEA;EACE,qCAAqC;EACrC,YAAY;EACZ,WAAW;EACX,wCAAwC;AAC1C;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,kBAAkB;EAClB,gCAAgC;EAChC,UAAU;EACV,aAAa;EACb,UAAU;EACV,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;EACZ,mBAAmB;EACnB,gDAAgD;AAClD;;AAEA;EACE,0BAA0B;EAC1B,oCAAoC;AACtC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,qBAAqB;EACrB,oCAAoC;EACpC,YAAY;AACd;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,8CAA8C;EAC9C,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,2CAA2C;AAC7C;;AAEA;EACE,WAAW;EACX,oBAAoB;EACpB,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,WAAW;EACX,oBAAoB;EACpB,kBAAkB;;EAElB,kBAAkB;EAClB,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;;EAEX,kBAAkB;AACpB;;AAEA;;EAEE,eAAe;EACf,6BAA6B;EAC7B,qBAAqB;EACrB,YAAY;EACZ,gBAAgB;;EAEhB,aAAa;EACb,mBAAmB;;EAEnB,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB;;AAEA;;;;EAIE,yBAAyB;AAC3B;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;;;;EAIE,kBAAkB;AACpB;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;EACE,mCAAmC;AACrC;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;;EAEE,6BAA6B;EAC7B,qBAAqB;EACrB,YAAY;EACZ,gBAAgB;;EAEhB,aAAa;EACb,mBAAmB;AACrB;;AAEA;;EAEE,mCAAmC;AACrC;;AAEA;;EAEE,eAAe;AACjB;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,mCAAmC;EACnC,mBAAmB;AACrB;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;;EAGE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE;IACE,QAAQ;EACV;EACA;IACE,WAAW;EACb;AACF;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,OAAO;EACP,WAAW;EACX,WAAW;EACX,iBAAiB;EACjB,sBAAsB;EACtB,yBAAyB;EACzB,mCAAmC;EACnC,4BAA4B;EAC5B,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,qCAAqC;AACvC;;AAEA;EACE,oBAAoB;EACpB,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ",sourcesContent:["html {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --primary-blue: #5ac8fa;\n  --primary-red: #f56565;\n  --primary-green: #40c0a0;\n  --light-gray: #e5e7eb;\n  --medium-gray: #c7c9cd;\n  --light-blue: #c9edfd;\n}\n\nbody {\n  font-family: sans-serif;\n}\n\n.hidden {\n  display: none;\n}\n\n.block {\n  display: block;\n}\n\n.past-due {\n  color: var(--primary-red);\n}\n\n.future-due {\n  color: var(--primary-green);\n}\n\n.due-today {\n  color: var(--primary-blue);\n}\n\nmain {\n  display: grid;\n  grid-template-columns: max(25%, 250px) 1fr;\n}\n\n.title {\n  font-family: serif;\n  font-size: 2.5rem;\n  letter-spacing: 0.1rem;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.new-todo-btn-container {\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n  padding-top: 1rem;\n  display: flex;\n  justify-content: center;\n}\n\n.tutorial-btn-container {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-top: auto;\n  gap: 0.5rem;\n}\n\n.title > .sub-title {\n  color: var(--primary-blue);\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.new-todo-btn,\n.replay-tutorial-btn,\n.end-tutorial-btn {\n  cursor: pointer;\n  border-radius: 1rem;\n  padding: 0.75rem;\n  width: 100%;\n  font-size: 1.125rem;\n}\n\n.new-todo-btn {\n  border: none;\n  background-color: var(--primary-blue);\n  color: white;\n  transition: box-shadow 200ms ease-in-out;\n}\n\n.new-todo-btn:hover {\n  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.replay-tutorial-btn,\n.end-tutorial-btn {\n  border: 1px solid var(--primary-red);\n  background-color: white;\n  color: var(--primary-red);\n  transition: color 200ms ease-in-out, background-color 200ms ease-in-out;\n}\n\n.replay-tutorial-btn:hover,\n.end-tutorial-btn:hover {\n  color: white;\n  background-color: var(--primary-red);\n}\n\n.title,\n.side-links,\n.new-todo-btn-container,\n.tutorial-btn-container {\n  padding: 1rem;\n}\n\n.sidebar {\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  height: 100vh;\n  position: sticky;\n  top: 0;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.side-links {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.tab {\n  cursor: pointer;\n  border-radius: 1rem;\n  border: none;\n  background-color: transparent;\n  font-weight: 500;\n  text-align: left;\n  padding: 0.75rem;\n  width: 100%;\n  font-size: 1.1rem;\n  transition: background-color 200ms ease-in-out;\n}\n\n.side-links:not(:has(.dragging)) .tab-container:not(.dragging):hover .tab {\n  background-color: var(--light-gray);\n}\n\n.edit-todo-btn,\ninput[type='submit'] {\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.5rem 1rem;\n\n  background-color: var(--light-gray);\n}\n\ninput[type='submit'] {\n  background-color: var(--primary-blue);\n  color: white;\n  width: 100%;\n  transition: box-shadow 200ms ease-in-out;\n}\n\ninput[type='submit']:hover {\n  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.1);\n}\n\ndialog {\n  position: absolute;\n  transform: translate(-50%, -50%);\n  inset: 50%;\n  padding: 1rem;\n  width: 80%;\n  max-width: 450px;\n  min-width: 300px;\n  border: none;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 50px 10px rgba(0, 0, 0, 0.1);\n}\n\ndialog::backdrop {\n  backdrop-filter: blur(5px);\n  background-color: rgba(0, 0, 0, 0.3);\n}\n\ntextarea {\n  resize: none;\n}\n\n.input-group {\n  display: flex;\n  flex-direction: column;\n  margin: 1rem 0;\n}\n\n.close-modal-btn {\n  height: 2rem;\n  width: 2rem;\n  font-size: 1.25rem;\n  font-weight: 600;\n  border: none;\n  border-radius: 0.25em;\n  background-color: var(--primary-red);\n  color: white;\n}\n\n.selected {\n  background-color: var(--light-gray);\n}\n\n.checkbox {\n  margin-right: 0.5rem;\n}\n\n.list-title {\n  margin: 0 0.5rem 0.5rem;\n  color: var(--primary-blue);\n}\n\n.todo {\n  list-style: none;\n  padding: 0.5rem;\n  border-radius: 1rem;\n  transition: background-color 200ms ease-in-out;\n  min-height: 65px;\n  position: relative;\n}\n\n.todo:not(:last-child)::after {\n  content: '';\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.todo-description {\n  height: 1em;\n  margin-left: 1.25rem;\n  font-size: 0.9rem;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.todo-btn-container {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: end;\n  margin-top: 0.5rem;\n\n  position: absolute;\n  bottom: 0.5rem;\n  right: 0.5rem;\n}\n\n.todo-main {\n  margin-bottom: 0.5rem;\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n\n.todo-title {\n  font-size: 1.125rem;\n}\n\n.todo-date {\n  margin-left: auto;\n  font-size: 0.9rem;\n}\n\n.content {\n  padding: 2rem;\n}\n\n.tab-container {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n\n  position: relative;\n}\n\n.edit-list-btn,\n.delete-list-btn {\n  cursor: default;\n  background-color: transparent;\n  border-radius: 0.5rem;\n  border: none;\n  padding: 0.25rem;\n\n  display: grid;\n  place-items: center;\n\n  position: absolute;\n}\n\n.delete-list-btn {\n  right: 0.5rem;\n}\n\n.edit-list-btn {\n  right: 2.75rem;\n}\n\n.delete-list-btn:focus,\n.delete-list-btn:hover,\n.delete-todo-btn:focus,\n.delete-todo-btn:hover {\n  color: var(--primary-red);\n}\n\n.delete-list-btn:hover,\n.edit-list-btn:hover {\n  background-color: var(--medium-gray);\n}\n\n.edit-list-btn,\n.delete-list-btn,\n.todo .edit-todo-btn,\n.todo .delete-todo-btn {\n  visibility: hidden;\n}\n\n.tab-container:has(.selected):focus-within .edit-list-btn,\n.tab-container:has(.selected):hover .edit-list-btn,\n.tab-container:has(.selected):focus-within .delete-list-btn,\n.tab-container:has(.selected):hover .delete-list-btn {\n  visibility: visible;\n}\n\n.todo:focus-within .edit-todo-btn,\n.todo:hover .edit-todo-btn,\n.todo:focus-within .delete-todo-btn,\n.todo:hover .delete-todo-btn {\n  visibility: visible;\n}\n\nul:not(:has(.dragging)) .todo:hover {\n  background-color: var(--light-gray);\n}\n\n.todo .edit-todo-btn:hover,\n.todo .delete-todo-btn:hover {\n  background-color: var(--medium-gray);\n}\n\n.edit-todo-btn,\n.delete-todo-btn {\n  background-color: transparent;\n  border-radius: 0.5rem;\n  border: none;\n  padding: 0.25rem;\n\n  display: grid;\n  place-items: center;\n}\n\n.edit-todo-btn:hover,\n.delete-todo-btn:hover {\n  background-color: var(--light-gray);\n}\n\n.tab-container .edit-icon,\n.tab-container .trash-icon {\n  font-size: 24px;\n}\n\n.todo .edit-icon,\n.todo .trash-icon {\n  font-size: 18px;\n}\n\n.dragging {\n  background-color: var(--light-blue);\n  border-radius: 1rem;\n}\n\n.tab-container.dragging .tab.selected {\n  background-color: var(--light-blue);\n}\n\ninput {\n  padding: 0.5rem 1rem;\n}\n\ntextarea {\n  padding: 1rem;\n}\n\nselect {\n  padding: 0.25rem 0.5rem;\n}\n\ninput,\ntextarea,\nselect {\n  font-size: 1rem;\n}\n\n.modal-header p {\n  font-size: 1.4rem;\n}\n\nlabel:not(> .todo-title) {\n  font-size: 1.1rem;\n  margin-bottom: 0.25rem;\n}\n\n.line-through {\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.checkbox + label:hover {\n  color: rgba(0, 0, 0, 0.8);\n}\n\n@keyframes strike {\n  0% {\n    width: 0;\n  }\n  100% {\n    width: 100%;\n  }\n}\n\n.line-through {\n  position: relative;\n}\n\n.line-through::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background: black;\n  animation-name: strike;\n  animation-duration: 200ms;\n  animation-timing-function: ease-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n\n.todo-description-container {\n  margin-right: 4rem;\n}\n\n.todo-main:has(.line-through) ~ .todo-btn-container .edit-todo-btn {\n  display: none;\n}\n\ndialog {\n  display: block;\n  transition: opacity 200ms ease-in-out;\n}\n\ndialog:not([open]) {\n  pointer-events: none;\n  opacity: 0;\n}\n\ndialog[open] {\n  opacity: 1;\n}\n"],sourceRoot:""}]);const l=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var d=0;d<t.length;d++){var c=[].concat(t[d]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},a=[],l=0;l<t.length;l++){var s=t[l],d=o.base?s[0]+o.base:s[0],c=i[d]||0,u="".concat(d," ").concat(c);i[d]=c+1;var h=n(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(m);else{var f=r(m,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var s=o(t,r),d=0;d<i.length;d++){var c=n(i[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var o={};(()=>{n.d(o,{f:()=>Nn,p:()=>Ln});var t=n(72),e=n.n(t),r=n(825),i=n.n(r),a=n(659),l=n.n(a),s=n(56),d=n.n(s),c=n(540),u=n.n(c),h=n(113),m=n.n(h),f=n(208),g={};function p(t){if(!t)return console.error("Invalid date input:",t),null;try{return t=new Date(t),new Date(t.valueOf()+60*t.getTimezoneOffset()*1e3)}catch(e){return console.error("Error removing timezone:",e),new Date(t)}}g.styleTagTransform=m(),g.setAttributes=d(),g.insert=l().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),e()(f.A,g),f.A&&f.A.locals&&f.A.locals;const A=document.querySelector(".modal.new-todo");document.querySelector(".new-todo-btn").addEventListener("click",(()=>{A.showModal()})),document.querySelectorAll(".close-modal-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.parentElement.parentElement;"DIALOG"===e.tagName&&e.close()}))})),window.onclick=function(t){"DIALOG"===t.target.tagName&&t.target.close()};const b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const E={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function C(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;o=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;o=t.values[r]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const w={ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:C({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:C({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:C({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:C({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:C({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function B(t){return(e,n={})=>{const o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;const a=i[0],l=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(l)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(a))return e}(l):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(a))return e}(l);let d;return d=t.valueCallback?t.valueCallback(s):s,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(a.length)}}}const x={ordinalNumber:(S={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(S.matchPattern);if(!n)return null;const o=n[0],r=t.match(S.parsePattern);if(!r)return null;let i=S.valueCallback?S.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(o.length)}}),era:B({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:B({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:B({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:B({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:B({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var S;const k={code:"en-US",formatDistance:(t,e,n)=>{let o;const r=b[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:E,formatRelative:(t,e,n,o)=>y[t],localize:w,match:x,options:{weekStartsOn:0,firstWeekContainsDate:1}};let D={};function M(){return D}Math.pow(10,8);const T=6048e5,_=864e5;function O(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function I(t){const e=O(t);return e.setHours(0,0,0,0),e}function N(t){const e=O(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function P(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function L(t){const e=O(t);return function(t,e){const n=I(t),o=I(e),r=+n-N(n),i=+o-N(o);return Math.round((r-i)/_)}(e,function(t){const e=O(t),n=P(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function Y(t,e){const n=M(),o=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=O(t),i=r.getDay(),a=(i<o?7:0)+i-o;return r.setDate(r.getDate()-a),r.setHours(0,0,0,0),r}function W(t){return Y(t,{weekStartsOn:1})}function q(t){const e=O(t),n=e.getFullYear(),o=P(t,0);o.setFullYear(n+1,0,4),o.setHours(0,0,0,0);const r=W(o),i=P(t,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const a=W(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}function j(t){const e=O(t),n=+W(e)-+function(t){const e=q(t),n=P(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),W(n)}(e);return Math.round(n/T)+1}function z(t,e){const n=O(t),o=n.getFullYear(),r=M(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,a=P(t,0);a.setFullYear(o+1,0,i),a.setHours(0,0,0,0);const l=Y(a,e),s=P(t,0);s.setFullYear(o,0,i),s.setHours(0,0,0,0);const d=Y(s,e);return n.getTime()>=l.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function X(t,e){const n=O(t),o=+Y(n,e)-+function(t,e){const n=M(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=z(t,e),i=P(t,0);return i.setFullYear(r,0,o),i.setHours(0,0,0,0),Y(i,e)}(n,e);return Math.round(o/T)+1}function F(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const $={y(t,e){const n=t.getFullYear(),o=n>0?n:1-n;return F("yy"===e?o%100:o,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):F(n+1,2)},d:(t,e)=>F(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>F(t.getHours()%12||12,e.length),H:(t,e)=>F(t.getHours(),e.length),m:(t,e)=>F(t.getMinutes(),e.length),s:(t,e)=>F(t.getSeconds(),e.length),S(t,e){const n=e.length,o=t.getMilliseconds();return F(Math.trunc(o*Math.pow(10,n-3)),e.length)}},H={G:function(t,e,n){const o=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),o=e>0?e:1-e;return n.ordinalNumber(o,{unit:"year"})}return $.y(t,e)},Y:function(t,e,n,o){const r=z(t,o),i=r>0?r:1-r;return"YY"===e?F(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):F(i,e.length)},R:function(t,e){return F(q(t),e.length)},u:function(t,e){return F(t.getFullYear(),e.length)},Q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return F(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return F(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){const o=t.getMonth();switch(e){case"M":case"MM":return $.M(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){const o=t.getMonth();switch(e){case"L":return String(o+1);case"LL":return F(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){const r=X(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):F(r,e.length)},I:function(t,e,n){const o=j(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):F(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):$.d(t,e)},D:function(t,e,n){const o=L(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):F(o,e.length)},E:function(t,e,n){const o=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){const r=t.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return F(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){const r=t.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return F(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const o=t.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return F(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){const o=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return $.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):$.H(t,e)},K:function(t,e,n){const o=t.getHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):F(o,e.length)},k:function(t,e,n){let o=t.getHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):F(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):$.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):$.s(t,e)},S:function(t,e){return $.S(t,e)},X:function(t,e,n){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return G(o);case"XXXX":case"XX":return U(o);default:return U(o,":")}},x:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"x":return G(o);case"xxxx":case"xx":return U(o);default:return U(o,":")}},O:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+R(o,":");default:return"GMT"+U(o,":")}},z:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+R(o,":");default:return"GMT"+U(o,":")}},t:function(t,e,n){return F(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return F(t.getTime(),e.length)}};function R(t,e=""){const n=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),i=o%60;return 0===i?n+String(r):n+String(r)+e+F(i,2)}function G(t,e){return t%60==0?(t>0?"-":"+")+F(Math.abs(t)/60,2):U(t,e)}function U(t,e=""){const n=t>0?"-":"+",o=Math.abs(t);return n+F(Math.trunc(o/60),2)+e+F(o%60,2)}const Q=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},J=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},Z={p:J,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],o=n[1],r=n[2];if(!r)return Q(t,e);let i;switch(o){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",Q(o,e)).replace("{{time}}",J(r,e))}},V=/^D+$/,K=/^Y+$/,tt=["D","DD","YY","YYYY"];function et(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=O(t);return!isNaN(Number(n))}const nt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ot=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rt=/^'([^]*?)'?$/,it=/''/g,at=/[a-zA-Z]/;function lt(t,e,n){const o=M(),r=n?.locale??o.locale??k,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,l=O(t);if(!et(l))throw new RangeError("Invalid time value");let s=e.match(ot).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,Z[e])(t,r.formatLong):t})).join("").match(nt).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:st(t)};if(H[e])return{isToken:!0,value:t};if(e.match(at))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));r.localize.preprocessor&&(s=r.localize.preprocessor(l,s));const d={firstWeekContainsDate:i,weekStartsOn:a,locale:r};return s.map((o=>{if(!o.isToken)return o.value;const i=o.value;return(!n?.useAdditionalWeekYearTokens&&function(t){return K.test(t)}(i)||!n?.useAdditionalDayOfYearTokens&&function(t){return V.test(t)}(i))&&function(t,e,n){const o=function(t,e,n){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${o} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(o),tt.includes(t))throw new RangeError(o)}(i,e,String(t)),(0,H[i[0]])(l,i,r.localize,d)})).join("")}function st(t){const e=t.match(rt);return e?e[1].replace(it,"'"):t}class dt{static globalId=0;constructor({title:t,dueDate:e=new Date,list:n,description:o,completed:r=!1,id:i}){this.title=t,this.dueDate=e,this.list=n,this.description=o,this.completed=r,this.id=i||dt.globalId,dt.globalId++}markCompleted(){this.completed=!0}markUncompleted(){this.completed=!1}toggleCompleted(){this.completed=!this.completed}getInfo(){return`${this.title}:\n- Description: ${this.description}\n- Due Date: ${lt(this.dueDate,"yyyy-MM-dd")}\n- Completed: ${this.completed?"Yes":"No"}`}}function ct(t,...e){e.forEach((e=>{!function(t,e){t[e.list]||(t[e.list]=[]),t[e.list].push(e)}(t,e)}))}function ut(t){for(const e in Nn)for(const n of Nn[e])if(n.id===+t)return n;return null}function ht(t){return e=t,n=Date.now(),+I(e)==+I(n);var e,n}function mt(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function ft(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?mt(Object(n),!0).forEach((function(e){pt(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):mt(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function gt(t){return gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gt(t)}function pt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function At(){return At=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},At.apply(this,arguments)}function bt(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}var vt=bt(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),Et=bt(/Edge/i),yt=bt(/firefox/i),Ct=bt(/safari/i)&&!bt(/chrome/i)&&!bt(/android/i),wt=bt(/iP(ad|od|hone)/i),Bt=bt(/chrome/i)&&bt(/android/i),xt={capture:!1,passive:!1};function St(t,e,n){t.addEventListener(e,n,!vt&&xt)}function kt(t,e,n){t.removeEventListener(e,n,!vt&&xt)}function Dt(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function Mt(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function Tt(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&Dt(t,e):Dt(t,e))||o&&t===n)return t;if(t===n)break}while(t=Mt(t))}return null}var _t,Ot=/\s+/g;function It(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(Ot," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(Ot," ")}}function Nt(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function Pt(t,e){var n="";if("string"==typeof t)n=t;else do{var o=Nt(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function Lt(t,e,n){if(t){var o=t.getElementsByTagName(e),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function Yt(){return document.scrollingElement||document.documentElement}function Wt(t,e,n,o,r){if(t.getBoundingClientRect||t===window){var i,a,l,s,d,c,u;if(t!==window&&t.parentNode&&t!==Yt()?(a=(i=t.getBoundingClientRect()).top,l=i.left,s=i.bottom,d=i.right,c=i.height,u=i.width):(a=0,l=0,s=window.innerHeight,d=window.innerWidth,c=window.innerHeight,u=window.innerWidth),(e||n)&&t!==window&&(r=r||t.parentNode,!vt))do{if(r&&r.getBoundingClientRect&&("none"!==Nt(r,"transform")||n&&"static"!==Nt(r,"position"))){var h=r.getBoundingClientRect();a-=h.top+parseInt(Nt(r,"border-top-width")),l-=h.left+parseInt(Nt(r,"border-left-width")),s=a+i.height,d=l+i.width;break}}while(r=r.parentNode);if(o&&t!==window){var m=Pt(r||t),f=m&&m.a,g=m&&m.d;m&&(s=(a/=g)+(c/=g),d=(l/=f)+(u/=f))}return{top:a,left:l,bottom:s,right:d,width:u,height:c}}}function qt(t,e,n){for(var o=$t(t,!0),r=Wt(t)[e];o;){var i=Wt(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===Yt())break;o=$t(o,!1)}return!1}function jt(t,e,n,o){for(var r=0,i=0,a=t.children;i<a.length;){if("none"!==a[i].style.display&&a[i]!==Ge.ghost&&(o||a[i]!==Ge.dragged)&&Tt(a[i],n.draggable,t,!1)){if(r===e)return a[i];r++}i++}return null}function zt(t,e){for(var n=t.lastElementChild;n&&(n===Ge.ghost||"none"===Nt(n,"display")||e&&!Dt(n,e));)n=n.previousElementSibling;return n||null}function Xt(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===Ge.clone||e&&!Dt(t,e)||n++;return n}function Ft(t){var e=0,n=0,o=Yt();if(t)do{var r=Pt(t),i=r.a,a=r.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function $t(t,e){if(!t||!t.getBoundingClientRect)return Yt();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=Nt(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return Yt();if(o||e)return n;o=!0}}}while(n=n.parentNode);return Yt()}function Ht(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function Rt(t,e){return function(){if(!_t){var n=arguments;1===n.length?t.call(this,n[0]):t.apply(this,n),_t=setTimeout((function(){_t=void 0}),e)}}}function Gt(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function Ut(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}function Qt(t,e,n){var o={};return Array.from(t.children).forEach((function(r){var i,a,l,s;if(Tt(r,e.draggable,t,!1)&&!r.animated&&r!==n){var d=Wt(r);o.left=Math.min(null!==(i=o.left)&&void 0!==i?i:1/0,d.left),o.top=Math.min(null!==(a=o.top)&&void 0!==a?a:1/0,d.top),o.right=Math.max(null!==(l=o.right)&&void 0!==l?l:-1/0,d.right),o.bottom=Math.max(null!==(s=o.bottom)&&void 0!==s?s:-1/0,d.bottom)}})),o.width=o.right-o.left,o.height=o.bottom-o.top,o.x=o.left,o.y=o.top,o}var Jt="Sortable"+(new Date).getTime();var Zt=[],Vt={initializeByDefault:!0},Kt={mount:function(t){for(var e in Vt)Vt.hasOwnProperty(e)&&!(e in t)&&(t[e]=Vt[e]);Zt.forEach((function(e){if(e.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")})),Zt.push(t)},pluginEvent:function(t,e,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var r=t+"Global";Zt.forEach((function(o){e[o.pluginName]&&(e[o.pluginName][r]&&e[o.pluginName][r](ft({sortable:e},n)),e.options[o.pluginName]&&e[o.pluginName][t]&&e[o.pluginName][t](ft({sortable:e},n)))}))},initializePlugins:function(t,e,n,o){for(var r in Zt.forEach((function(o){var r=o.pluginName;if(t.options[r]||o.initializeByDefault){var i=new o(t,e,t.options);i.sortable=t,i.options=t.options,t[r]=i,At(n,i.defaults)}})),t.options)if(t.options.hasOwnProperty(r)){var i=this.modifyOption(t,r,t.options[r]);void 0!==i&&(t.options[r]=i)}},getEventProperties:function(t,e){var n={};return Zt.forEach((function(o){"function"==typeof o.eventProperties&&At(n,o.eventProperties.call(e[o.pluginName],t))})),n},modifyOption:function(t,e,n){var o;return Zt.forEach((function(r){t[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[e]&&(o=r.optionListeners[e].call(t[r.pluginName],n))})),o}};var te=["evt"],ee=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,r=function(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}(n,te);Kt.pluginEvent.bind(Ge)(t,e,ft({dragEl:oe,parentEl:re,ghostEl:ie,rootEl:ae,nextEl:le,lastDownEl:se,cloneEl:de,cloneHidden:ce,dragStarted:we,putSortable:pe,activeSortable:Ge.active,originalEvent:o,oldIndex:ue,oldDraggableIndex:me,newIndex:he,newDraggableIndex:fe,hideGhostForTarget:Fe,unhideGhostForTarget:$e,cloneNowHidden:function(){ce=!0},cloneNowShown:function(){ce=!1},dispatchSortableEvent:function(t){ne({sortable:e,name:t,originalEvent:o})}},r))};function ne(t){!function(t){var e=t.sortable,n=t.rootEl,o=t.name,r=t.targetEl,i=t.cloneEl,a=t.toEl,l=t.fromEl,s=t.oldIndex,d=t.newIndex,c=t.oldDraggableIndex,u=t.newDraggableIndex,h=t.originalEvent,m=t.putSortable,f=t.extraEventProperties;if(e=e||n&&n[Jt]){var g,p=e.options,A="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||vt||Et?(g=document.createEvent("Event")).initEvent(o,!0,!0):g=new CustomEvent(o,{bubbles:!0,cancelable:!0}),g.to=a||n,g.from=l||n,g.item=r||n,g.clone=i,g.oldIndex=s,g.newIndex=d,g.oldDraggableIndex=c,g.newDraggableIndex=u,g.originalEvent=h,g.pullMode=m?m.lastPutMode:void 0;var b=ft(ft({},f),Kt.getEventProperties(o,e));for(var v in b)g[v]=b[v];n&&n.dispatchEvent(g),p[A]&&p[A].call(e,g)}}(ft({putSortable:pe,cloneEl:de,targetEl:oe,rootEl:ae,oldIndex:ue,oldDraggableIndex:me,newIndex:he,newDraggableIndex:fe},t))}var oe,re,ie,ae,le,se,de,ce,ue,he,me,fe,ge,pe,Ae,be,ve,Ee,ye,Ce,we,Be,xe,Se,ke,De=!1,Me=!1,Te=[],_e=!1,Oe=!1,Ie=[],Ne=!1,Pe=[],Le="undefined"!=typeof document,Ye=wt,We=Et||vt?"cssFloat":"float",qe=Le&&!Bt&&!wt&&"draggable"in document.createElement("div"),je=function(){if(Le){if(vt)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),ze=function(t,e){var n=Nt(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=jt(t,0,e),i=jt(t,1,e),a=r&&Nt(r),l=i&&Nt(i),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+Wt(r).width,d=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+Wt(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var c="left"===a.float?"left":"right";return!i||"both"!==l.clear&&l.clear!==c?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[We]||i&&"none"===n[We]&&s+d>o)?"vertical":"horizontal"},Xe=function(t){function e(t,n){return function(o,r,i,a){var l=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==t&&(n||l))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(o,r,i,a),n)(o,r,i,a);var s=(n?o:r).options.group.name;return!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}}var n={},o=t.group;o&&"object"==gt(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},Fe=function(){!je&&ie&&Nt(ie,"display","none")},$e=function(){!je&&ie&&Nt(ie,"display","")};Le&&!Bt&&document.addEventListener("click",(function(t){if(Me)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),Me=!1,!1}),!0);var He=function(t){if(oe){t=t.touches?t.touches[0]:t;var e=(r=t.clientX,i=t.clientY,Te.some((function(t){var e=t[Jt].options.emptyInsertThreshold;if(e&&!zt(t)){var n=Wt(t),o=r>=n.left-e&&r<=n.right+e,l=i>=n.top-e&&i<=n.bottom+e;return o&&l?a=t:void 0}})),a);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[Jt]._onDragOver(n)}}var r,i,a},Re=function(t){oe&&oe.parentNode[Jt]._isOutsideThisEl(t.target)};function Ge(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=At({},e),t[Jt]=this;var n,o,r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return ze(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Ge.supportPointer&&"PointerEvent"in window&&!Ct,emptyInsertThreshold:5};for(var i in Kt.initializePlugins(this,t,r),r)!(i in e)&&(e[i]=r[i]);for(var a in Xe(e),this)"_"===a.charAt(0)&&"function"==typeof this[a]&&(this[a]=this[a].bind(this));this.nativeDraggable=!e.forceFallback&&qe,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?St(t,"pointerdown",this._onTapStart):(St(t,"mousedown",this._onTapStart),St(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(St(t,"dragover",this),St(t,"dragenter",this)),Te.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),At(this,(o=[],{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(t){if("none"!==Nt(t,"display")&&t!==Ge.ghost){o.push({target:t,rect:Wt(t)});var e=ft({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=Pt(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}}))},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var e=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof t&&t());var r=!1,i=0;o.forEach((function(t){var n=0,o=t.target,a=o.fromRect,l=Wt(o),s=o.prevFromRect,d=o.prevToRect,c=t.rect,u=Pt(o,!0);u&&(l.top-=u.f,l.left-=u.e),o.toRect=l,o.thisAnimationDuration&&Ht(s,l)&&!Ht(a,l)&&(c.top-l.top)/(c.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(n=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(c,s,d,e.options)),Ht(l,a)||(o.prevFromRect=a,o.prevToRect=l,n||(n=e.options.animation),e.animate(o,c,l,n)),n&&(r=!0,i=Math.max(i,n),clearTimeout(o.animationResetTimer),o.animationResetTimer=setTimeout((function(){o.animationTime=0,o.prevFromRect=null,o.fromRect=null,o.prevToRect=null,o.thisAnimationDuration=null}),n),o.thisAnimationDuration=n)})),clearTimeout(n),r?n=setTimeout((function(){"function"==typeof t&&t()}),i):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){Nt(t,"transition",""),Nt(t,"transform","");var r=Pt(this.el),i=r&&r.a,a=r&&r.d,l=(e.left-n.left)/(i||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,Nt(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),Nt(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),Nt(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){Nt(t,"transition",""),Nt(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),o)}}}))}function Ue(t,e,n,o,r,i,a,l){var s,d,c=t[Jt],u=c.options.onMove;return!window.CustomEvent||vt||Et?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=r||e,s.relatedRect=i||Wt(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),u&&(d=u.call(c,s,a)),d}function Qe(t){t.draggable=!1}function Je(){Ne=!1}function Ze(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function Ve(t){return setTimeout(t,0)}function Ke(t){return clearTimeout(t)}Ge.prototype={constructor:Ge,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(Be=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,oe):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,o=this.options,r=o.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,l=(a||t).target,s=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,d=o.filter;if(function(t){Pe.length=0;for(var e=t.getElementsByTagName("input"),n=e.length;n--;){var o=e[n];o.checked&&Pe.push(o)}}(n),!oe&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!Ct||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=Tt(l,o.draggable,n,!1))&&l.animated||se===l)){if(ue=Xt(l),me=Xt(l,o.draggable),"function"==typeof d){if(d.call(this,t,l,this))return ne({sortable:e,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),ee("filter",e,{evt:t}),void(r&&t.cancelable&&t.preventDefault())}else if(d&&(d=d.split(",").some((function(o){if(o=Tt(s,o.trim(),n,!1))return ne({sortable:e,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),ee("filter",e,{evt:t}),!0}))))return void(r&&t.cancelable&&t.preventDefault());o.handle&&!Tt(s,o.handle,n,!1)||this._prepareDragStart(t,a,l)}}},_prepareDragStart:function(t,e,n){var o,r=this,i=r.el,a=r.options,l=i.ownerDocument;if(n&&!oe&&n.parentNode===i){var s=Wt(n);if(ae=i,re=(oe=n).parentNode,le=oe.nextSibling,se=n,ge=a.group,Ge.dragged=oe,Ae={target:oe,clientX:(e||t).clientX,clientY:(e||t).clientY},ye=Ae.clientX-s.left,Ce=Ae.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,oe.style["will-change"]="all",o=function(){ee("delayEnded",r,{evt:t}),Ge.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!yt&&r.nativeDraggable&&(oe.draggable=!0),r._triggerDragStart(t,e),ne({sortable:r,name:"choose",originalEvent:t}),It(oe,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){Lt(oe,t.trim(),Qe)})),St(l,"dragover",He),St(l,"mousemove",He),St(l,"touchmove",He),St(l,"mouseup",r._onDrop),St(l,"touchend",r._onDrop),St(l,"touchcancel",r._onDrop),yt&&this.nativeDraggable&&(this.options.touchStartThreshold=4,oe.draggable=!0),ee("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(Et||vt))o();else{if(Ge.eventCanceled)return void this._onDrop();St(l,"mouseup",r._disableDelayedDrag),St(l,"touchend",r._disableDelayedDrag),St(l,"touchcancel",r._disableDelayedDrag),St(l,"mousemove",r._delayedDragTouchMoveHandler),St(l,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&St(l,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){oe&&Qe(oe),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;kt(t,"mouseup",this._disableDelayedDrag),kt(t,"touchend",this._disableDelayedDrag),kt(t,"touchcancel",this._disableDelayedDrag),kt(t,"mousemove",this._delayedDragTouchMoveHandler),kt(t,"touchmove",this._delayedDragTouchMoveHandler),kt(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?St(document,"pointermove",this._onTouchMove):St(document,e?"touchmove":"mousemove",this._onTouchMove):(St(oe,"dragend",this),St(ae,"dragstart",this._onDragStart));try{document.selection?Ve((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(De=!1,ae&&oe){ee("dragStarted",this,{evt:e}),this.nativeDraggable&&St(document,"dragover",Re);var n=this.options;!t&&It(oe,n.dragClass,!1),It(oe,n.ghostClass,!0),Ge.active=this,t&&this._appendGhost(),ne({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(be){this._lastX=be.clientX,this._lastY=be.clientY,Fe();for(var t=document.elementFromPoint(be.clientX,be.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(be.clientX,be.clientY))!==e;)e=t;if(oe.parentNode[Jt]._isOutsideThisEl(t),e)do{if(e[Jt]&&e[Jt]._onDragOver({clientX:be.clientX,clientY:be.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break;t=e}while(e=e.parentNode);$e()}},_onTouchMove:function(t){if(Ae){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,r=t.touches?t.touches[0]:t,i=ie&&Pt(ie,!0),a=ie&&i&&i.a,l=ie&&i&&i.d,s=Ye&&ke&&Ft(ke),d=(r.clientX-Ae.clientX+o.x)/(a||1)+(s?s[0]-Ie[0]:0)/(a||1),c=(r.clientY-Ae.clientY+o.y)/(l||1)+(s?s[1]-Ie[1]:0)/(l||1);if(!Ge.active&&!De){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(ie){i?(i.e+=d-(ve||0),i.f+=c-(Ee||0)):i={a:1,b:0,c:0,d:1,e:d,f:c};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");Nt(ie,"webkitTransform",u),Nt(ie,"mozTransform",u),Nt(ie,"msTransform",u),Nt(ie,"transform",u),ve=d,Ee=c,be=r}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!ie){var t=this.options.fallbackOnBody?document.body:ae,e=Wt(oe,!0,Ye,!0,t),n=this.options;if(Ye){for(ke=t;"static"===Nt(ke,"position")&&"none"===Nt(ke,"transform")&&ke!==document;)ke=ke.parentNode;ke!==document.body&&ke!==document.documentElement?(ke===document&&(ke=Yt()),e.top+=ke.scrollTop,e.left+=ke.scrollLeft):ke=Yt(),Ie=Ft(ke)}It(ie=oe.cloneNode(!0),n.ghostClass,!1),It(ie,n.fallbackClass,!0),It(ie,n.dragClass,!0),Nt(ie,"transition",""),Nt(ie,"transform",""),Nt(ie,"box-sizing","border-box"),Nt(ie,"margin",0),Nt(ie,"top",e.top),Nt(ie,"left",e.left),Nt(ie,"width",e.width),Nt(ie,"height",e.height),Nt(ie,"opacity","0.8"),Nt(ie,"position",Ye?"absolute":"fixed"),Nt(ie,"zIndex","100000"),Nt(ie,"pointerEvents","none"),Ge.ghost=ie,t.appendChild(ie),Nt(ie,"transform-origin",ye/parseInt(ie.style.width)*100+"% "+Ce/parseInt(ie.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,r=n.options;ee("dragStart",this,{evt:t}),Ge.eventCanceled?this._onDrop():(ee("setupClone",this),Ge.eventCanceled||((de=Ut(oe)).removeAttribute("id"),de.draggable=!1,de.style["will-change"]="",this._hideClone(),It(de,this.options.chosenClass,!1),Ge.clone=de),n.cloneId=Ve((function(){ee("clone",n),Ge.eventCanceled||(n.options.removeCloneOnHide||ae.insertBefore(de,oe),n._hideClone(),ne({sortable:n,name:"clone"}))})),!e&&It(oe,r.dragClass,!0),e?(Me=!0,n._loopId=setInterval(n._emulateDragOver,50)):(kt(document,"mouseup",n._onDrop),kt(document,"touchend",n._onDrop),kt(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,oe)),St(document,"drop",n),Nt(oe,"transform","translateZ(0)")),De=!0,n._dragStartId=Ve(n._dragStarted.bind(n,e,t)),St(document,"selectstart",n),we=!0,Ct&&Nt(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,o,r,i=this.el,a=t.target,l=this.options,s=l.group,d=Ge.active,c=ge===s,u=l.sort,h=pe||d,m=this,f=!1;if(!Ne){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),a=Tt(a,l.draggable,i,!0),M("dragOver"),Ge.eventCanceled)return f;if(oe.contains(t.target)||a.animated&&a.animatingX&&a.animatingY||m._ignoreWhileAnimating===a)return _(!1);if(Me=!1,d&&!l.disabled&&(c?u||(o=re!==ae):pe===this||(this.lastPutMode=ge.checkPull(this,d,oe,t))&&s.checkPut(this,d,oe,t))){if(r="vertical"===this._getDirection(t,a),e=Wt(oe),M("dragOverValid"),Ge.eventCanceled)return f;if(o)return re=ae,T(),this._hideClone(),M("revert"),Ge.eventCanceled||(le?ae.insertBefore(oe,le):ae.appendChild(oe)),_(!0);var g=zt(i,l.draggable);if(!g||function(t,e,n){var o=Wt(zt(n.el,n.options.draggable)),r=Qt(n.el,n.options,ie);return e?t.clientX>r.right+10||t.clientY>o.bottom&&t.clientX>o.left:t.clientY>r.bottom+10||t.clientX>o.right&&t.clientY>o.top}(t,r,this)&&!g.animated){if(g===oe)return _(!1);if(g&&i===t.target&&(a=g),a&&(n=Wt(a)),!1!==Ue(ae,i,oe,e,a,n,t,!!a))return T(),g&&g.nextSibling?i.insertBefore(oe,g.nextSibling):i.appendChild(oe),re=i,O(),_(!0)}else if(g&&function(t,e,n){var o=Wt(jt(n.el,0,n.options,!0)),r=Qt(n.el,n.options,ie);return e?t.clientX<r.left-10||t.clientY<o.top&&t.clientX<o.right:t.clientY<r.top-10||t.clientY<o.bottom&&t.clientX<o.left}(t,r,this)){var p=jt(i,0,l,!0);if(p===oe)return _(!1);if(n=Wt(a=p),!1!==Ue(ae,i,oe,e,a,n,t,!1))return T(),i.insertBefore(oe,p),re=i,O(),_(!0)}else if(a.parentNode===i){n=Wt(a);var A,b,v,E=oe.parentNode!==i,y=!function(t,e,n){var o=n?t.left:t.top,r=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||r===l||o+i/2===a+s/2}(oe.animated&&oe.toRect||e,a.animated&&a.toRect||n,r),C=r?"top":"left",w=qt(a,"top","top")||qt(oe,"top","top"),B=w?w.scrollTop:void 0;if(Be!==a&&(b=n[C],_e=!1,Oe=!y&&l.invertSwap||E),A=function(t,e,n,o,r,i,a,l){var s=o?t.clientY:t.clientX,d=o?n.height:n.width,c=o?n.top:n.left,u=o?n.bottom:n.right,h=!1;if(!a)if(l&&Se<d*r){if(!_e&&(1===xe?s>c+d*i/2:s<u-d*i/2)&&(_e=!0),_e)h=!0;else if(1===xe?s<c+Se:s>u-Se)return-xe}else if(s>c+d*(1-r)/2&&s<u-d*(1-r)/2)return function(t){return Xt(oe)<Xt(t)?1:-1}(e);return(h=h||a)&&(s<c+d*i/2||s>u-d*i/2)?s>c+d/2?1:-1:0}(t,a,n,r,y?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Oe,Be===a),0!==A){var x=Xt(oe);do{x-=A,v=re.children[x]}while(v&&("none"===Nt(v,"display")||v===ie))}if(0===A||v===a)return _(!1);Be=a,xe=A;var S=a.nextElementSibling,k=!1,D=Ue(ae,i,oe,e,a,n,t,k=1===A);if(!1!==D)return 1!==D&&-1!==D||(k=1===D),Ne=!0,setTimeout(Je,30),T(),k&&!S?i.appendChild(oe):a.parentNode.insertBefore(oe,k?S:a),w&&Gt(w,0,B-w.scrollTop),re=oe.parentNode,void 0===b||Oe||(Se=Math.abs(b-Wt(a)[C])),O(),_(!0)}if(i.contains(oe))return _(!1)}return!1}function M(l,s){ee(l,m,ft({evt:t,isOwner:c,axis:r?"vertical":"horizontal",revert:o,dragRect:e,targetRect:n,canSort:u,fromSortable:h,target:a,completed:_,onMove:function(n,o){return Ue(ae,i,oe,e,n,Wt(n),t,o)},changed:O},s))}function T(){M("dragOverAnimationCapture"),m.captureAnimationState(),m!==h&&h.captureAnimationState()}function _(e){return M("dragOverCompleted",{insertion:e}),e&&(c?d._hideClone():d._showClone(m),m!==h&&(It(oe,pe?pe.options.ghostClass:d.options.ghostClass,!1),It(oe,l.ghostClass,!0)),pe!==m&&m!==Ge.active?pe=m:m===Ge.active&&pe&&(pe=null),h===m&&(m._ignoreWhileAnimating=a),m.animateAll((function(){M("dragOverAnimationComplete"),m._ignoreWhileAnimating=null})),m!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(a===oe&&!oe.animated||a===i&&!a.animated)&&(Be=null),l.dragoverBubble||t.rootEl||a===document||(oe.parentNode[Jt]._isOutsideThisEl(t.target),!e&&He(t)),!l.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),f=!0}function O(){he=Xt(oe),fe=Xt(oe,l.draggable),ne({sortable:m,name:"change",toEl:i,newIndex:he,newDraggableIndex:fe,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){kt(document,"mousemove",this._onTouchMove),kt(document,"touchmove",this._onTouchMove),kt(document,"pointermove",this._onTouchMove),kt(document,"dragover",He),kt(document,"mousemove",He),kt(document,"touchmove",He)},_offUpEvents:function(){var t=this.el.ownerDocument;kt(t,"mouseup",this._onDrop),kt(t,"touchend",this._onDrop),kt(t,"pointerup",this._onDrop),kt(t,"touchcancel",this._onDrop),kt(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;he=Xt(oe),fe=Xt(oe,n.draggable),ee("drop",this,{evt:t}),re=oe&&oe.parentNode,he=Xt(oe),fe=Xt(oe,n.draggable),Ge.eventCanceled||(De=!1,Oe=!1,_e=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Ke(this.cloneId),Ke(this._dragStartId),this.nativeDraggable&&(kt(document,"drop",this),kt(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Ct&&Nt(document.body,"user-select",""),Nt(oe,"transform",""),t&&(we&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),ie&&ie.parentNode&&ie.parentNode.removeChild(ie),(ae===re||pe&&"clone"!==pe.lastPutMode)&&de&&de.parentNode&&de.parentNode.removeChild(de),oe&&(this.nativeDraggable&&kt(oe,"dragend",this),Qe(oe),oe.style["will-change"]="",we&&!De&&It(oe,pe?pe.options.ghostClass:this.options.ghostClass,!1),It(oe,this.options.chosenClass,!1),ne({sortable:this,name:"unchoose",toEl:re,newIndex:null,newDraggableIndex:null,originalEvent:t}),ae!==re?(he>=0&&(ne({rootEl:re,name:"add",toEl:re,fromEl:ae,originalEvent:t}),ne({sortable:this,name:"remove",toEl:re,originalEvent:t}),ne({rootEl:re,name:"sort",toEl:re,fromEl:ae,originalEvent:t}),ne({sortable:this,name:"sort",toEl:re,originalEvent:t})),pe&&pe.save()):he!==ue&&he>=0&&(ne({sortable:this,name:"update",toEl:re,originalEvent:t}),ne({sortable:this,name:"sort",toEl:re,originalEvent:t})),Ge.active&&(null!=he&&-1!==he||(he=ue,fe=me),ne({sortable:this,name:"end",toEl:re,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){ee("nulling",this),ae=oe=re=ie=le=de=se=ce=Ae=be=we=he=fe=ue=me=Be=xe=pe=ge=Ge.dragged=Ge.ghost=Ge.clone=Ge.active=null,Pe.forEach((function(t){t.checked=!0})),Pe.length=ve=Ee=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":oe&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)Tt(t=n[o],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||Ze(t));return e},sort:function(t,e){var n={},o=this.el;this.toArray().forEach((function(t,e){var r=o.children[e];Tt(r,this.options.draggable,o,!1)&&(n[t]=r)}),this),e&&this.captureAnimationState(),t.forEach((function(t){n[t]&&(o.removeChild(n[t]),o.appendChild(n[t]))})),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return Tt(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=Kt.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&Xe(n)},destroy:function(){ee("destroy",this);var t=this.el;t[Jt]=null,kt(t,"mousedown",this._onTapStart),kt(t,"touchstart",this._onTapStart),kt(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(kt(t,"dragover",this),kt(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),Te.splice(Te.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!ce){if(ee("hideClone",this),Ge.eventCanceled)return;Nt(de,"display","none"),this.options.removeCloneOnHide&&de.parentNode&&de.parentNode.removeChild(de),ce=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(ce){if(ee("showClone",this),Ge.eventCanceled)return;oe.parentNode!=ae||this.options.group.revertClone?le?ae.insertBefore(de,le):ae.appendChild(de):ae.insertBefore(de,oe),this.options.group.revertClone&&this.animate(oe,de),Nt(de,"display",""),ce=!1}}else this._hideClone()}},Le&&St(document,"touchmove",(function(t){(Ge.active||De)&&t.cancelable&&t.preventDefault()})),Ge.utils={on:St,off:kt,css:Nt,find:Lt,is:function(t,e){return!!Tt(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:Rt,closest:Tt,toggleClass:It,clone:Ut,index:Xt,nextTick:Ve,cancelNextTick:Ke,detectDirection:ze,getChild:jt},Ge.get=function(t){return t[Jt]},Ge.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&(Ge.utils=ft(ft({},Ge.utils),t.utils)),Kt.mount(t)}))},Ge.create=function(t,e){return new Ge(t,e)},Ge.version="1.15.2";var tn,en,nn,on,rn,an,ln=[],sn=!1;function dn(){ln.forEach((function(t){clearInterval(t.pid)})),ln=[]}function cn(){clearInterval(an)}var un=Rt((function(t,e,n,o){if(e.scroll){var r,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,l=e.scrollSensitivity,s=e.scrollSpeed,d=Yt(),c=!1;en!==n&&(en=n,dn(),tn=e.scroll,r=e.scrollFn,!0===tn&&(tn=$t(n,!0)));var u=0,h=tn;do{var m=h,f=Wt(m),g=f.top,p=f.bottom,A=f.left,b=f.right,v=f.width,E=f.height,y=void 0,C=void 0,w=m.scrollWidth,B=m.scrollHeight,x=Nt(m),S=m.scrollLeft,k=m.scrollTop;m===d?(y=v<w&&("auto"===x.overflowX||"scroll"===x.overflowX||"visible"===x.overflowX),C=E<B&&("auto"===x.overflowY||"scroll"===x.overflowY||"visible"===x.overflowY)):(y=v<w&&("auto"===x.overflowX||"scroll"===x.overflowX),C=E<B&&("auto"===x.overflowY||"scroll"===x.overflowY));var D=y&&(Math.abs(b-i)<=l&&S+v<w)-(Math.abs(A-i)<=l&&!!S),M=C&&(Math.abs(p-a)<=l&&k+E<B)-(Math.abs(g-a)<=l&&!!k);if(!ln[u])for(var T=0;T<=u;T++)ln[T]||(ln[T]={});ln[u].vx==D&&ln[u].vy==M&&ln[u].el===m||(ln[u].el=m,ln[u].vx=D,ln[u].vy=M,clearInterval(ln[u].pid),0==D&&0==M||(c=!0,ln[u].pid=setInterval(function(){o&&0===this.layer&&Ge.active._onTouchMove(rn);var e=ln[this.layer].vy?ln[this.layer].vy*s:0,n=ln[this.layer].vx?ln[this.layer].vx*s:0;"function"==typeof r&&"continue"!==r.call(Ge.dragged.parentNode[Jt],n,e,t,rn,ln[this.layer].el)||Gt(ln[this.layer].el,n,e)}.bind({layer:u}),24))),u++}while(e.bubbleScroll&&h!==d&&(h=$t(h,!1)));sn=c}}),30),hn=function(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,r=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||r;a();var d=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,c=document.elementFromPoint(d.clientX,d.clientY);l(),s&&!s.el.contains(c)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function mn(){}function fn(){}mn.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=jt(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:hn},At(mn,{pluginName:"revertOnSpill"}),fn.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:hn},At(fn,{pluginName:"removeOnSpill"}),Ge.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?St(document,"dragover",this._handleAutoScroll):this.options.supportPointer?St(document,"pointermove",this._handleFallbackAutoScroll):e.touches?St(document,"touchmove",this._handleFallbackAutoScroll):St(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?kt(document,"dragover",this._handleAutoScroll):(kt(document,"pointermove",this._handleFallbackAutoScroll),kt(document,"touchmove",this._handleFallbackAutoScroll),kt(document,"mousemove",this._handleFallbackAutoScroll)),cn(),dn(),clearTimeout(_t),_t=void 0},nulling:function(){rn=en=tn=sn=an=nn=on=null,ln.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,o=(t.touches?t.touches[0]:t).clientX,r=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(o,r);if(rn=t,e||this.options.forceAutoScrollFallback||Et||vt||Ct){un(t,this.options,i,e);var a=$t(i,!0);!sn||an&&o===nn&&r===on||(an&&cn(),an=setInterval((function(){var i=$t(document.elementFromPoint(o,r),!0);i!==a&&(a=i,dn()),un(t,n.options,i,e)}),10),nn=o,on=r)}else{if(!this.options.bubbleScroll||$t(i,!0)===Yt())return void dn();un(t,this.options,$t(i,!1),!1)}}},At(t,{pluginName:"scroll",initializeByDefault:!0})}),Ge.mount(fn,mn);const gn=Ge;function pn(){localStorage.setItem("listOfLists",JSON.stringify(Nn))}function An(t){document.querySelectorAll(".tab").forEach((t=>{t.classList.remove("selected")})),document.querySelectorAll("article").forEach((t=>{t.classList.add("hidden")}));let e=document.getElementById(`${t}`);e||(e=Array.from(document.querySelectorAll(".tab"))[0],t=e.id),e.classList.add("selected"),document.querySelector(`article.${t.split(" ").join("_")}`).classList.remove("hidden"),localStorage.setItem("lastTab",t)}function bn(){document.querySelectorAll(".tab").forEach((t=>{t.addEventListener("click",(t=>{Array.from(t.target.classList).includes("selected")||An(t.target.id)}))})),Array.from(document.querySelectorAll(".todo")).forEach((t=>{const e=t.id,n=document.getElementById(`checkbox-${e}`),o=n.cloneNode(!0);n.parentNode.replaceChild(o,n),o.addEventListener("change",(function(){const n=t.querySelector(".todo-title"),o=ut(e);this.checked?(n.classList.add("line-through"),o.markCompleted()):(n.classList.remove("line-through"),o.markUncompleted()),pn()}))})),function(){const t=document.querySelectorAll(".edit-todo-btn"),e=document.querySelector(".modal.edit-todo");t.forEach((t=>{const n=t,o=n.cloneNode(!0);n.parentNode.replaceChild(o,n),o.addEventListener("click",(()=>{e.showModal();const n=document.getElementById("editTitle"),o=document.getElementById("editDueDate"),r=document.getElementById("editDescription"),i=document.getElementById("hiddenId"),a=t.id.split("-")[1],l=`title-${a}`,s=`dueDate-${a}`,d=`description-${a}`,c=document.getElementById(l),u=document.getElementById(s),h=document.getElementById(d);n.value=c?c.textContent:"";let m=new Date(u.textContent);m=p(m);const f=("0"+m.getDate()).slice(-2),g=("0"+(m.getMonth()+1)).slice(-2),A=m.getFullYear()+"-"+g+"-"+f;o.value=A,r.value=h.innerHTML.replace(/<\/p><p class="todo-description">/g,"\n").replace(/<p class="todo-description">/g,"").replace(/<\/p>/g,""),i.value=a}))}))}(),Array.from(document.querySelectorAll(".delete-todo-btn")).forEach((t=>{const e=t.id.split("-")[1],n=document.getElementById(`delete-${e}`),o=n.cloneNode(!0);n.parentNode.replaceChild(o,n),o.addEventListener("click",(()=>{document.getElementById(e).remove(),function(t){for(const e in Nn){const n=Nn[e];for(let e=0;e<n.length;e++)if(n[e].id===t.id)return n.splice(e,1),!0}}(ut(e)),pn()}))})),function(){const t=document.querySelectorAll(".edit-list-btn"),e=document.querySelector(".modal.edit-list");t.forEach((t=>{const n=t,o=n.cloneNode(!0);n.parentNode.replaceChild(o,n),o.addEventListener("click",(()=>{e.showModal();const n=document.getElementById("listTitle"),o=t.id.split("-")[1],r=document.getElementById(o);n.value=r?r.textContent:""}))}))}(),document.querySelectorAll(".delete-list-btn").forEach((t=>{const e=t.id.split("-")[1];t.addEventListener("click",(()=>{if(document.querySelectorAll(".tab").length<=1)return void alert("You cannot delete all your lists! Create a new list if you'd like to delete this list.");if(!confirm("Are you sure you want to delete this list?"))return;const t=document.querySelector(".side-links .tab-container .tab.selected");if(t.id===e){const n=document.querySelector(".side-links .tab-container .tab"),o=document.querySelector(`.tab-container:has(.tab[id="${e}"]) + .tab-container .tab`);n.id!==t.id?An(n.id):An(o.id)}const n=document.querySelector(`article.${e.split(" ").join("_")}`),o=document.querySelector(`.tab-container:has(.tab[id="${e}"])`);n.remove(),o.remove(),function(t){for(const e in Nn)e===t&&delete Nn[t]}(e),pn()}))}))}function vn(t){if(Array.from(document.querySelectorAll(".side-links button")).map((t=>t.textContent)).includes(t.list)){const e=document.querySelector(`ul.${t.list.split(" ").join("_")}`);t.id===dt.globalId-1?Cn(t,e,t.list):function(t){const e=document.getElementById(`title-${t.id}`),n=document.getElementById(`dueDate-${t.id}`),o=document.getElementById(`description-${t.id}`);e.replaceWith(wn(t)),n.replaceWith(xn(t)),o.replaceWith(Bn(t))}(t)}else yn(t.list,[t]);En(t.list),bn(),pn()}function En(t){const e=document.querySelector(".new-todo-form"),n=e.querySelector(".list-select");if(!Array.from(e.querySelectorAll(".list-select option")).map((t=>t.textContent)).includes(t)){const e=document.createElement("option");e.value=t,e.textContent=t,n.appendChild(e)}}function yn(t,e){!function(t){const e=document.querySelector(".side-links"),n=document.createElement("div");n.classList.add("tab-container");const o=document.createElement("button");o.textContent=t,o.classList.add("list-btn","tab"),o.id=t;const r=document.createElement("button"),i=document.createElement("span");i.classList.add("material-icons","trash-icon"),i.textContent="delete_outline",r.appendChild(i);const a=document.createElement("button"),l=document.createElement("span");l.classList.add("material-icons","edit-icon"),l.textContent="edit",a.appendChild(l),r.classList.add("delete-list-btn"),r.id=`delete-${t}`,a.classList.add("edit-list-btn"),a.id=`edit-${t}`,n.append(o,a,r),e.appendChild(n)}(t);const n=document.querySelector(".content"),o=document.createElement("article"),r=document.createElement("h2");r.textContent=t,r.id=`list-${t.split(" ").join("_")}`,r.classList.add("list-title"),o.classList.add(t.split(" ").join("_")),o.appendChild(r);const i=document.createElement("ul");Ln[`${t}Sortable`]=gn.create(i,{animation:150,ghostClass:"dragging",swapThreshold:.2,onSort:function(){const e=Ln[`${t}Sortable`].toArray(),n=JSON.stringify(e);localStorage.setItem(`${t}SortableOrder`,n)}});for(const n of e)Cn(n,i,t);o.appendChild(i),n.appendChild(o)}function Cn(t,e,n){if(t.list===n){e.classList.add(`${t.list.split(" ").join("_")}`);const n=document.createElement("li");n.id=t.id,n.classList.add("todo");const o=document.createElement("div");o.classList.add("todo-main");const r=document.createElement("label"),i=document.createElement("input");i.type="checkbox",i.id=`checkbox-${t.id}`,i.classList.add("checkbox"),r.htmlFor=i.id,t.completed&&(i.checked=!0),r.append(wn(t)),o.append(i,r,xn(t)),n.append(o,Bn(t));const a=document.createElement("div");a.classList.add("todo-btn-container"),a.append(function(t){const e=document.createElement("button"),n=document.createElement("span");return n.classList.add("material-icons","edit-icon"),n.textContent="edit",e.appendChild(n),e.id=`edit-${t.id}`,e.classList.add("edit-todo-btn"),e}(t),function(t){const e=document.createElement("button"),n=document.createElement("span");return n.classList.add("material-icons","trash-icon"),n.textContent="delete_outline",e.appendChild(n),e.id=`delete-${t.id}`,e.classList.add("delete-todo-btn"),e}(t)),n.append(a,function(t){const e=document.createElement("div");return e.setAttribute("data-id",t.id),e.style.display="none",e}(t)),e.appendChild(n)}}function wn(t){const e=document.createElement("span");return e.textContent=t.title,e.id=`title-${t.id}`,e.classList.add("todo-title"),t.completed&&e.classList.add("line-through"),e}function Bn(t){let e=[];t.description&&(e=t.description.trimEnd().split("\n"));const n=document.createElement("div");return n.classList.add("todo-description-container"),e.forEach((t=>{const e=document.createElement("p");e.textContent=t,e.classList.add("todo-description"),n.appendChild(e)})),n.id=`description-${t.id}`,n}function xn(t){const e=document.createElement("span"),n=p(t.dueDate);return e.textContent=lt(n,"M/dd/yyyy"),ht(n)?e.classList.add("due-today"):(o=t.dueDate,r=new Date,+O(o)<+O(r)?e.classList.add("past-due"):e.classList.add("future-due")),e.classList.add("todo-date"),e.id=`dueDate-${t.id}`,e;var o,r}const Sn=document.querySelector(".modal.new-todo"),kn=document.querySelector(".new-todo-form");kn.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("newTitle").value,n=document.getElementById("newDueDate").value,o=document.getElementById("newDescription").value,r=document.getElementById("newList").value,i=document.getElementById("newCreateList").value,a=new dt({title:e,dueDate:n,list:r||i,description:o});ct(Nn,a),vn(a),kn.reset(),Sn.close()}));const Dn=document.querySelector(".modal.edit-todo"),Mn=document.querySelector(".edit-todo-form");Mn.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("editTitle").value,n=document.getElementById("editDueDate").value,o=document.getElementById("editDescription").value,r=ut(document.getElementById("hiddenId").value);r.title=e,r.dueDate=n,r.description=o,vn(r),Mn.reset(),Dn.close()}));const Tn=document.querySelector(".modal.edit-list"),_n=document.querySelector(".edit-list-form");_n.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("listTitle").value,n=document.querySelector(".selected"),o=n.textContent;n.textContent=e,n.id=e,document.getElementById(`edit-${o}`).id=`edit-${e}`,document.getElementById(`delete-${o}`).id=`delete-${e}`;const r=document.getElementById(`list-${o.split(" ").join("_")}`);r.textContent=e,r.id=`list-${e}`;const i=document.querySelector(`article.${o.split(" ").join("_")}`);i.classList.remove(o.split(" ").join("_")),i.classList.add(e.split(" ").join("_"));const a=document.querySelector(`ul.${o.split(" ").join("_")}`);a.classList.remove(o.split(" ").join("_")),a.classList.add(e.split(" ").join("_")),Nn[e]=Nn[o],delete Nn[o];for(const t of Nn[e])t.list=e;An(e);const l=kn.querySelector(`.list-select option[value="${o}"]`);l.textContent=e,l.value=e,_n.reset(),Tn.close()}));const On=document.querySelector(".replay-tutorial-btn");On.addEventListener("click",(()=>{localStorage.setItem("savedList",JSON.stringify(Nn)),localStorage.setItem("playingTutorial",!0),localStorage.removeItem("listOfLists"),location.reload()}));const In=document.querySelector(".end-tutorial-btn");In.addEventListener("click",(()=>{for(const t in Nn)delete Nn[t];const t=JSON.parse(localStorage.getItem("savedList"));for(const e in t){const n=t[e],o=Nn[e]=[];for(let t=0;t<n.length;t++)o[t]=new dt({title:n[t].title,dueDate:n[t].dueDate,list:n[t].list,description:n[t].description,completed:n[t].completed,id:n[t].id})}localStorage.clear(),pn(),location.reload()})),localStorage.getItem("playingTutorial")?On.classList.add("hidden"):In.classList.add("hidden");let Nn={},Pn=[];if(function(t){let e;try{e=window.localStorage;const t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}()&&localStorage.getItem("listOfLists")){let t=JSON.parse(localStorage.getItem("listOfLists"));for(const e in t){const n=t[e],o=Nn[e]=[];for(let t=0;t<n.length;t++)o[t]=new dt({title:n[t].title,dueDate:n[t].dueDate,list:n[t].list,description:n[t].description,completed:n[t].completed,id:n[t].id}),Pn.push(o[t])}}else{const t=function(){const t=new Date;t.setDate(t.getDate()-1);const e=new Date;e.setDate(e.getDate()+1);const n=new dt({title:"Click the checkbox or the title on a todo to mark it as complete",description:"Click it again to mark it as incomplete",list:"Getting Started"}),o=new dt({title:"Click the edit (pencil) icon on a todo to edit it",list:"Getting Started"}),r=new dt({title:"Click the trash icon on a todo to delete it",list:"Getting Started"}),i=new dt({title:'Click the "New Todo" button to add a new todo',list:"Getting Started"}),a=new dt({title:"Click the edit (pencil) icon on a list to edit the list name",list:"Getting Started"}),l=new dt({title:"Click the trash icon on a list to delete it",description:"Note: you cannot delete a list if it is the only list remaining",list:"Getting Started"}),s=new dt({title:"Drag todos to rearrange them",list:"Getting Started"}),d=new dt({title:"Drag lists to rearrange them",list:"Getting Started"}),c={};return ct(c,n,o,r,i,a,l,s,d),{listOfLists:c,todos:[n,o,r,i,a,l,s,d]}}();Pn=t.todos,Nn=t.listOfLists,localStorage.setItem("listOfLists",JSON.stringify(Nn))}const Ln={};!function(t){for(const e in Nn)yn(e,t),En(e);!function(){const t=document.querySelector("nav.side-links");Ln.tabListSortable=gn.create(t,{animation:150,ghostClass:"dragging",swapThreshold:.2,onSort:function(){const t=Ln.tabListSortable.toArray(),e=JSON.stringify(t);localStorage.setItem("tabListSortableOrder",e)}})}(),function(){for(const t in Ln){const e=localStorage.getItem(`${t}Order`);if(e){const n=JSON.parse(e);Ln[t].sort(n)}}}(),bn();const e=localStorage.getItem("lastTab");An(e||Array.from(document.querySelectorAll(".tab"))[0].id)}(Pn)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,